name: Release

on:
  push:
    tags:
      - 'v*'  # 当推送 v* 标签时触发，例如 v1.0.0

jobs:
  create-release:
    name: Create Release
    runs-on: ubuntu-latest
    outputs:
      upload_url: ${{ steps.create_release.outputs.upload_url }}
    
    steps:
    - name: Create Release
      id: create_release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ github.ref }}
        release_name: Release ${{ github.ref }}
        draft: false
        prerelease: false

  build-and-upload:
    name: Build and Upload Release Assets
    needs: create-release
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        include:
          - os: ubuntu-latest
            goos: linux
            goarch: amd64
            asset_name: srs-sip-linux-amd64
          - os: ubuntu-latest
            goos: linux
            goarch: arm64
            asset_name: srs-sip-linux-arm64
          - os: macos-latest
            goos: darwin
            goarch: amd64
            asset_name: srs-sip-darwin-amd64
          - os: macos-latest
            goos: darwin
            goarch: arm64
            asset_name: srs-sip-darwin-arm64
          - os: windows-latest
            goos: windows
            goarch: amd64
            asset_name: srs-sip-windows-amd64.exe
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v5

    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version: '1.23'

    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'

    - name: Build frontend
      run: |
        cd html/NextGB
        npm ci
        npm run build

    - name: Build binary (Linux/macOS)
      if: runner.os != 'Windows'
      env:
        GOOS: ${{ matrix.goos }}
        GOARCH: ${{ matrix.goarch }}
      run: |
        go build -o ${{ matrix.asset_name }} -ldflags="-s -w" main/main.go

    - name: Build binary (Windows)
      if: runner.os == 'Windows'
      env:
        GOOS: ${{ matrix.goos }}
        GOARCH: ${{ matrix.goarch }}
      run: |
        go build -o ${{ matrix.asset_name }} -ldflags="-s -w" main/main.go

    - name: Create release package
      run: |
        mkdir -p release
        cp ${{ matrix.asset_name }} release/
        cp -r conf release/
        cp -r html/NextGB/dist release/html
        cp README.md release/
        cp LICENSE release/

    - name: Create tarball (Linux/macOS)
      if: runner.os != 'Windows'
      run: |
        cd release
        tar -czf ../${{ matrix.asset_name }}.tar.gz .

    - name: Create zip (Windows)
      if: runner.os == 'Windows'
      run: |
        Compress-Archive -Path release/* -DestinationPath ${{ matrix.asset_name }}.zip

    - name: Upload Release Asset (Linux/macOS)
      if: runner.os != 'Windows'
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ needs.create-release.outputs.upload_url }}
        asset_path: ./${{ matrix.asset_name }}.tar.gz
        asset_name: ${{ matrix.asset_name }}.tar.gz
        asset_content_type: application/gzip

    - name: Upload Release Asset (Windows)
      if: runner.os == 'Windows'
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ needs.create-release.outputs.upload_url }}
        asset_path: ./${{ matrix.asset_name }}.zip
        asset_name: ${{ matrix.asset_name }}.zip
        asset_content_type: application/zip

